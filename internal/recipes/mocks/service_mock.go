// Code generated by go-mockgen 1.3.4; DO NOT EDIT.

package mocks

import (
	"context"
	"sync"

	recipes "github.com/rubengomes8/HappyMouthBackend/internal/recipes"
)

// MockService is a mock implementation of the service interface (from the
// package github.com/rubengomes8/HappyMouthBackend/internal/recipes) used
// for unit testing.
type MockService struct {
	// AskRecipeFunc is an instance of a mock function object controlling
	// the behavior of the method AskRecipe.
	AskRecipeFunc *ServiceAskRecipeFunc
}

// NewMockService creates a new mock of the service interface. All methods
// return zero values for all results, unless overwritten.
func NewMockService() *MockService {
	return &MockService{
		AskRecipeFunc: &ServiceAskRecipeFunc{
			defaultHook: func(context.Context, recipes.RecipeDefinitions) (r0 recipes.Recipe, r1 error) {
				return
			},
		},
	}
}

// NewStrictMockService creates a new mock of the service interface. All
// methods panic on invocation, unless overwritten.
func NewStrictMockService() *MockService {
	return &MockService{
		AskRecipeFunc: &ServiceAskRecipeFunc{
			defaultHook: func(context.Context, recipes.RecipeDefinitions) (recipes.Recipe, error) {
				panic("unexpected invocation of MockService.AskRecipe")
			},
		},
	}
}

// surrogateMockService is a copy of the service interface (from the package
// github.com/rubengomes8/HappyMouthBackend/internal/recipes). It is
// redefined here as it is unexported in the source package.
type surrogateMockService interface {
	AskRecipe(context.Context, recipes.RecipeDefinitions) (recipes.Recipe, error)
}

// NewMockServiceFrom creates a new mock of the MockService interface. All
// methods delegate to the given implementation, unless overwritten.
func NewMockServiceFrom(i surrogateMockService) *MockService {
	return &MockService{
		AskRecipeFunc: &ServiceAskRecipeFunc{
			defaultHook: i.AskRecipe,
		},
	}
}

// ServiceAskRecipeFunc describes the behavior when the AskRecipe method of
// the parent MockService instance is invoked.
type ServiceAskRecipeFunc struct {
	defaultHook func(context.Context, recipes.RecipeDefinitions) (recipes.Recipe, error)
	hooks       []func(context.Context, recipes.RecipeDefinitions) (recipes.Recipe, error)
	history     []ServiceAskRecipeFuncCall
	mutex       sync.Mutex
}

// AskRecipe delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockService) AskRecipe(v0 context.Context, v1 recipes.RecipeDefinitions) (recipes.Recipe, error) {
	r0, r1 := m.AskRecipeFunc.nextHook()(v0, v1)
	m.AskRecipeFunc.appendCall(ServiceAskRecipeFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the AskRecipe method of
// the parent MockService instance is invoked and the hook queue is empty.
func (f *ServiceAskRecipeFunc) SetDefaultHook(hook func(context.Context, recipes.RecipeDefinitions) (recipes.Recipe, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// AskRecipe method of the parent MockService instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *ServiceAskRecipeFunc) PushHook(hook func(context.Context, recipes.RecipeDefinitions) (recipes.Recipe, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ServiceAskRecipeFunc) SetDefaultReturn(r0 recipes.Recipe, r1 error) {
	f.SetDefaultHook(func(context.Context, recipes.RecipeDefinitions) (recipes.Recipe, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ServiceAskRecipeFunc) PushReturn(r0 recipes.Recipe, r1 error) {
	f.PushHook(func(context.Context, recipes.RecipeDefinitions) (recipes.Recipe, error) {
		return r0, r1
	})
}

func (f *ServiceAskRecipeFunc) nextHook() func(context.Context, recipes.RecipeDefinitions) (recipes.Recipe, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ServiceAskRecipeFunc) appendCall(r0 ServiceAskRecipeFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ServiceAskRecipeFuncCall objects describing
// the invocations of this function.
func (f *ServiceAskRecipeFunc) History() []ServiceAskRecipeFuncCall {
	f.mutex.Lock()
	history := make([]ServiceAskRecipeFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ServiceAskRecipeFuncCall is an object that describes an invocation of
// method AskRecipe on an instance of MockService.
type ServiceAskRecipeFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 recipes.RecipeDefinitions
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 recipes.Recipe
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ServiceAskRecipeFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ServiceAskRecipeFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}
