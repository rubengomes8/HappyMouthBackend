// Code generated by "enumer -json -text -sql -type RecipeType -trimprefix Recipe -transform snake-upper"; DO NOT EDIT.

package enums

import (
	"database/sql/driver"
	"encoding/json"
	"fmt"
	"strings"
)

const _RecipeTypeName = "ANYSOUPPASTAPIZZACURRYONE_POTBURGEROVEN_ROASTSALAD"

var _RecipeTypeIndex = [...]uint8{0, 3, 7, 12, 17, 22, 29, 35, 45, 50}

const _RecipeTypeLowerName = "anysouppastapizzacurryone_potburgeroven_roastsalad"

func (i RecipeType) String() string {
	i -= 1
	if i >= RecipeType(len(_RecipeTypeIndex)-1) {
		return fmt.Sprintf("RecipeType(%d)", i+1)
	}
	return _RecipeTypeName[_RecipeTypeIndex[i]:_RecipeTypeIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _RecipeTypeNoOp() {
	var x [1]struct{}
	_ = x[Any-(1)]
	_ = x[Soup-(2)]
	_ = x[Pasta-(3)]
	_ = x[Pizza-(4)]
	_ = x[Curry-(5)]
	_ = x[OnePot-(6)]
	_ = x[Burger-(7)]
	_ = x[OvenRoast-(8)]
	_ = x[Salad-(9)]
}

var _RecipeTypeValues = []RecipeType{Any, Soup, Pasta, Pizza, Curry, OnePot, Burger, OvenRoast, Salad}

var _RecipeTypeNameToValueMap = map[string]RecipeType{
	_RecipeTypeName[0:3]:        Any,
	_RecipeTypeLowerName[0:3]:   Any,
	_RecipeTypeName[3:7]:        Soup,
	_RecipeTypeLowerName[3:7]:   Soup,
	_RecipeTypeName[7:12]:       Pasta,
	_RecipeTypeLowerName[7:12]:  Pasta,
	_RecipeTypeName[12:17]:      Pizza,
	_RecipeTypeLowerName[12:17]: Pizza,
	_RecipeTypeName[17:22]:      Curry,
	_RecipeTypeLowerName[17:22]: Curry,
	_RecipeTypeName[22:29]:      OnePot,
	_RecipeTypeLowerName[22:29]: OnePot,
	_RecipeTypeName[29:35]:      Burger,
	_RecipeTypeLowerName[29:35]: Burger,
	_RecipeTypeName[35:45]:      OvenRoast,
	_RecipeTypeLowerName[35:45]: OvenRoast,
	_RecipeTypeName[45:50]:      Salad,
	_RecipeTypeLowerName[45:50]: Salad,
}

var _RecipeTypeNames = []string{
	_RecipeTypeName[0:3],
	_RecipeTypeName[3:7],
	_RecipeTypeName[7:12],
	_RecipeTypeName[12:17],
	_RecipeTypeName[17:22],
	_RecipeTypeName[22:29],
	_RecipeTypeName[29:35],
	_RecipeTypeName[35:45],
	_RecipeTypeName[45:50],
}

// RecipeTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func RecipeTypeString(s string) (RecipeType, error) {
	if val, ok := _RecipeTypeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _RecipeTypeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to RecipeType values", s)
}

// RecipeTypeValues returns all values of the enum
func RecipeTypeValues() []RecipeType {
	return _RecipeTypeValues
}

// RecipeTypeStrings returns a slice of all String values of the enum
func RecipeTypeStrings() []string {
	strs := make([]string, len(_RecipeTypeNames))
	copy(strs, _RecipeTypeNames)
	return strs
}

// IsARecipeType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i RecipeType) IsARecipeType() bool {
	for _, v := range _RecipeTypeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for RecipeType
func (i RecipeType) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for RecipeType
func (i *RecipeType) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("RecipeType should be a string, got %s", data)
	}

	var err error
	*i, err = RecipeTypeString(s)
	return err
}

// MarshalText implements the encoding.TextMarshaler interface for RecipeType
func (i RecipeType) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for RecipeType
func (i *RecipeType) UnmarshalText(text []byte) error {
	var err error
	*i, err = RecipeTypeString(string(text))
	return err
}

func (i RecipeType) Value() (driver.Value, error) {
	return i.String(), nil
}

func (i *RecipeType) Scan(value interface{}) error {
	if value == nil {
		return nil
	}

	var str string
	switch v := value.(type) {
	case []byte:
		str = string(v)
	case string:
		str = v
	case fmt.Stringer:
		str = v.String()
	default:
		return fmt.Errorf("invalid value of RecipeType: %[1]T(%[1]v)", value)
	}

	val, err := RecipeTypeString(str)
	if err != nil {
		return err
	}

	*i = val
	return nil
}
